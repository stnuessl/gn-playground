#
# The MIT License (MIT)
#
# Copyright (c) 2025 Steffen Nuessle
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import("//gn/toolchains/clang/vars.gni")

_prefix = "clang-tidy"

template("clang_tidy") {
  assert(defined(invoker.sources), "'sources' must be specified")

  globs = [
    "*.c",
    "*.cc",
    "*.cpp",
    "*.cxx",
  ]

  _targets = []

  foreach(source, filter_include(invoker.sources, globs)) {
    _clang_tidy_target = "$_prefix-source-" + get_path_info(source, "name")

    _targets += [ ":$_clang_tidy_target" ]

    action(_clang_tidy_target) {
      _ignore = [
        "script",
        "testonly",
        "sources",
      ]

      forward_variables_from(invoker, "*", _ignore)

      testonly = true
      sources = [ source ]
      inputs = [ "//.clang-tidy" ]
      outputs = [ "$target_gen_dir/$_clang_tidy_target.non-existant" ]
      mnemonic = "CLANG-TIDY"

      script = clang_tidy_tool
      args = [
        "-p",
        rebase_path(root_build_dir, root_build_dir),
        "-vfsoverlay",
        rebase_path(clang.vfs_path, root_build_dir),
        "-config-file",
        rebase_path(inputs[0], root_build_dir),
        rebase_path(source, root_build_dir),
      ]
    }
  }

  _name = "$_prefix-$target_name"
  group(_name) {
    testonly = true
    deps = _targets
  }
}
