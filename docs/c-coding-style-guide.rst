C Coding Style Guide
====================

A consistent C coding style improves maintainability and readability. There
are a lot of coding style guides, however, a lot of them seem outdated and
considering only old or no proper development tools like a language server
at all.

.. note::

   Unless otherwise stated, the guidelines in this section don't account for
   any naming conventions.

.. note::

   Exceptions to these guidelines can be made for legacy code.

.. note::

    Violations of the coding style guidelines may be checked during reviews
    and result in findings which must get fixed.


Macro Names
-----------

Macro names must be written in `SCREAMING_SNAKE_CASE`.

Line Width
----------

A line must not contain more than 120 characters.
An exception can be granted for code that is generated by a tool outside the
project's control.

Unary Operators
---------------
Unary operators must be directly followed by the operand.

.. code-block:: c

    !var


Binary Operators
----------------
Binary operators must be surrounded by at least one whitespace.

.. code-block:: c

    a = b + c;


Braces
------

Braces (`{` and `}`) of control statements and functions must go onto their
own lines. The indentation level of such braces must be the same as for the
control statement or function.

.. code-block:: c

    void f(int n)
    {
        while (n--)
        {
            g();
        }
    }


Indentation
-----------

Code must be intended by **four** spaces for every additional opened scope.
Do not use tabs!

Comments
--------

Unless there is no tecnical reason to the otherwise, C style comments
(`/* ... */`) must be used.

Code and comments must be strictly separated from each other by putting
them onto separate lines. An exception is granted for field or variable
declarations.

The simplest forms of comments shall be used. Don't use comments for decoration!

.. code-block:: c

    /* Good */

    /*
     * Good
     */

   /******* Bad *******/

   /********************************************************
    *                                                      *
    *                        BAD                           *
    *                                                      *
    *******************************************************/

An exception can be granted for comments containing restructured text used
for document generation and for comments generated by supplied tools.

Empty Lines
-----------

Empty lines (or lines only containing a `{` or a `}` must be used before
every control statement.

Futher, it is highly recommend to use empty lines to further separate logical
code sections (e.g. variable declarations, assignment blocks, etc.) from each
other.

Type Information
----------------

No type information must be added to type, variable or function names. An
exception can be made for complex types.

.. code-block:: c

    /* bad */
    typedef struct { /* ... */ } job_queue_tst;
    typedef enum { /* ... */ } error_code_ten;
    int var_i32;
    unsigned char *ptr_uc8;

    /* ok */
    struct priority_queue queue;


Rationale: This practice only bloats identifiers making the code less readable
and less maintainable. A combination of modern compilers, static code analysis
and the use of a language server will do a much better job at avoiding bugs
due to type misuse than this practice.

