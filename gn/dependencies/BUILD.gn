#
# The MIT License (MIT)
#
# Copyright (c) 2025 Steffen Nuessle
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import("//gn/python/python.gni")
import("//gn/vars.gni")

#
# We could also use ninja to retrieve the dependencies which would actually be
# faster. However, on Windows we seem to run into a lot of race conditions
# due to parallel file accesses. The slower but more robust solution seems to
# be clang-scan-deps.
#
# To cope with a potentially large execution time of clang-scan-deps and
# with the fact that we only know all of its dependencies (all source files)
# during build time, we generate an extra ninja build. This allows for correct
# rebuilds and avoids unnecessary long execution times of no files were
# modified. The generated build will need its own build directory to not
# interfere with the primary ninja build.
#

_clang_scan_deps_output = "$target_gen_dir/dependencies-raw.json"

python("dependencies-scan-build") {
  testonly = true
  deps = [ description.target ]
  inputs = description.outputs

  outputs = [ "$target_gen_dir/$target_name.ninja" ]

  requirements = [ "ninja" ]
  env = [ "PYTHONPATH=" + rebase_path("//gn/python/packages", root_build_dir) ]
  script = "//gn/dependencies/generate-scan-build.py"
  args = [
    "--description",
    rebase_path(inputs[0], root_build_dir),
    "-o",
    rebase_path(outputs[0], root_build_dir),
    "--build-directory",
    rebase_path(target_gen_dir, root_build_dir),
    "--build-output",
    rebase_path(_clang_scan_deps_output, target_gen_dir),
    "--compile-commands",
    rebase_path("$root_build_dir/compile_commands.json", target_gen_dir),
  ]
}

action("dependencies-scan") {
  testonly = true
  deps = [ ":dependencies-scan-build" ]
  inputs = get_target_outputs(deps[0])
  mnemonic = "NINJA"

  outputs = [
    _clang_scan_deps_output,
    "$target_gen_dir/$target_name.non-existant",
  ]
  script = ninja_tool
  args = [
    "-j1",
    "-C",
    rebase_path(target_gen_dir, root_build_dir),
    "-f",
    get_path_info(inputs[0], "file"),
  ]
}

# Convert representation of deps to decouple our scripts from the
# experimental output of clang-scan-deps.
python("dependencies") {
  testonly = true
  deps = [ ":dependencies-scan" ]
  inputs = [ _clang_scan_deps_output ]
  outputs = dependencies.outputs
  mnemonic = "DEPS"

  script = "//gn/dependencies/convert-dependencies.py"
  args = [
    "-o",
    rebase_path(outputs[0], root_build_dir),
    rebase_path(inputs[0], root_build_dir),
    "--exclude-deps",
    "/include/*",
    "/lib/*",
    "/usr/include/*",
    "/usr/lib/*",
  ]
}
