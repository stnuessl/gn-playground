#
# The MIT License (MIT)
#
# Copyright (c) 2025 Steffen Nuessle
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# An action to invoke either a python module or a python script.
template("python") {
  assert(defined(invoker.module) != defined(invoker.script),
         "exactly one of 'module' or 'script' must be specified")

  _args = [
    "run",
    "--no-project",
  ]
  _deps = []
  _inputs = []

  # If the user specified some environment variables, create an appropriate
  # env-file which can be used by uv. We deliberately do this at build time
  # to keep the generation time as short as possible.
  if (defined(invoker.env)) {
    _env_file_action = "$target_name-env-file"
    _env_file_path = "$target_gen_dir/$target_name.env"

    action(_env_file_action) {
      outputs = [ _env_file_path ]
      inputs = [ "//gn/python/mk-env.py" ]
      mnemonic = "ENV-FILE"

      script = uv_tool
      args = [
               "run",
               rebase_path(inputs[0], root_build_dir),
               "-o",
               rebase_path(outputs[0], root_build_dir),
             ] + invoker.env
    }

    _args += [
      "--env-file",
      rebase_path(_env_file_path, root_build_dir),
    ]

    _deps += [ ":$_env_file_action" ]
    _inputs += [ _env_file_path ]
  }

  if (defined(invoker.requirements)) {
    _args += [ "--with" ] + invoker.requirements
  }

  action(target_name) {
    _ignore = [
      "args",
      "deps",
      "env",
      "inputs",
      "module",
      "script",
      "requirements",
    ]

    forward_variables_from(invoker, "*", _ignore)

    if (defined(invoker.module)) {
      _args += [
        "python",
        "-m",
        invoker.module,
      ]
    } else {
      _args += [ rebase_path(invoker.script, root_build_dir) ]
      _inputs += [ invoker.script ]
    }

    # Simply extend the internal variables with the invoker's variables.
    if (defined(invoker.inputs)) {
      _inputs += invoker.inputs
    }

    if (defined(invoker.deps)) {
      _deps += invoker.deps
    }

    if (defined(invoker.args)) {
      _args += invoker.args
    }

    inputs = _inputs
    deps = _deps
    script = uv_tool
    args = _args
  }
}
