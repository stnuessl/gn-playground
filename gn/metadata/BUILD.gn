#
# The MIT License (MIT)
#
# Copyright (c) 2025 Steffen Nuessle
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import("//gn/python/python.gni")
import("//gn/vars.gni")

python("metadata") {
  testonly = true
  deps = [ description.target ]
  inputs = description.outputs
  outputs = metadata.outputs
  mnemonic = "METADATA"

  script = "//gn/metadata/extract-metadata.py"
  args = [
    "-o",
    rebase_path(outputs[0], root_build_dir),
    rebase_path(inputs[0], root_build_dir),
  ]
}

group("check-metadata") {
  testonly = true
  deps = [
    ":check-metadata-available",
    ":check-metadata-schema",
  ]
}

# Ensure that there is metadata available for each source file used in the
# software build.
python("check-metadata-available") {
  testonly = true
  deps = [
    dependencies.target,
    metadata.target,
  ]
  inputs = metadata.outputs + dependencies.outputs
  outputs = [ "$target_gen_dir/$target_name.non-existant" ]
  mnemonic = "CHECK"

  script = "//gn/metadata/check-metadata-available.py"
  args =
      [ "--dependencies" ] + rebase_path(dependencies.outputs, root_build_dir) +
      [ "--metadata" ] + rebase_path(metadata.outputs, root_build_dir)
}

# Ensure that the available metadata conforms to a specific schema.
python("check-metadata-schema") {
  _scheme_file = "//gn/metadata/metadata-schema.json"

  testonly = true
  deps = [ metadata.target ]
  inputs = metadata.outputs + [ _scheme_file ]
  outputs = [ "$target_gen_dir/$target_name.non-existant" ]

  mnemonic = "CHECK"

  requirements = [ "jsonschema" ]
  script = "//gn/metadata/check-metadata-schema.py"
  args = [ "--metadata" ] + rebase_path(metadata.outputs, root_build_dir) + [
           "--schema",
           rebase_path(_scheme_file, root_build_dir),
         ]
}
